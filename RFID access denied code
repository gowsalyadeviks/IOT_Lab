#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 10     // Define the Slave Select pin for the RFID module
#define RST_PIN 9     // Define the Reset pin for the RFID module
#define LED_PIN 8     // Define the LED pin

MFRC522 mfrc522(SS_PIN, RST_PIN); // Create an instance of the MFRC522 class

// Allowed RFID UID
const byte allowedUID[] = {0x49, 0x58, 0x67, 0x59};

void setup() {
  Serial.begin(9600);  // Initialize serial communication with the PC
  SPI.begin();         // Initialize the SPI bus
  mfrc522.PCD_Init(); // Initialize the MFRC522 module
  pinMode(LED_PIN, OUTPUT); // Set the LED pin as output
  Serial.println("Place your RFID card or tag near the reader.");
}

void loop() {
  // Look for new cards
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;
  }

  // Select one of the cards
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  // Read and print card UID
  Serial.print("UID Value: ");
  byte uidSize = mfrc522.uid.size;
  bool accessGranted = false;
 
  Serial.print("UID Length: ");Serial.println(uidSize); // Print UID length
  Serial.print("UID Value: ");
  for (byte i = 0; i < uidSize; i++) {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
  }
  Serial.println(); // Print newline

  // Check if the UID matches the allowed UID
  if (compareUIDs(mfrc522.uid.uidByte, allowedUID)) {
    accessGranted = true;
  }

  if (accessGranted) {
    Serial.println("Access Granted");
    digitalWrite(LED_PIN, HIGH); // Turn on LED
  } else {
    Serial.println("Access Denied");
    digitalWrite(LED_PIN, LOW); // Turn off LED
  }

  // Halt PICC
  mfrc522.PICC_HaltA();
  // Stop encryption on PCD
  mfrc522.PCD_StopCrypto1();
}

bool compareUIDs(byte *uid1, const byte *uid2) {
  for (byte i = 0; i < 4; i++) {  // Assuming UID length is 4 bytes
    if (uid1[i] != uid2[i]) {
      return false;
    }
  }
  return true;
}
